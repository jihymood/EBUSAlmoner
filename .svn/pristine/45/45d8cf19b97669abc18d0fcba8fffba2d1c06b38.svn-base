package businspection.xpro.com.ebusdriver.sections.logic;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

import com.google.gson.Gson;

import org.xutils.http.RequestParams;

import businspection.xpro.com.ebusdriver.baseapi.BaseLogic;
import businspection.xpro.com.ebusdriver.baseapi.RequestParamUtils;
import businspection.xpro.com.ebusdriver.contants.Constants;
import businspection.xpro.com.ebusdriver.contants.HttpUrls;
import businspection.xpro.com.ebusdriver.sections.entity.BusPositionMainEntity;
import businspection.xpro.com.ebusdriver.sections.entity.BusPositionParamsEntity;
import businspection.xpro.com.ebusdriver.sections.entity.LoginMainEntity;
import businspection.xpro.com.ebusdriver.sections.entity.LoginParmsEntity;
import businspection.xpro.com.ebusdriver.sections.entity.NearBusParamsEntity;
import businspection.xpro.com.ebusdriver.sections.entity.NoticeMainEntity;
import businspection.xpro.com.ebusdriver.sections.entity.NoticeParamEntity;
import businspection.xpro.com.ebusdriver.sections.entity.TaskInfoMainEntity;
import businspection.xpro.com.ebusdriver.sections.entity.TaskParamsEntity;
import businspection.xpro.com.ebusdriver.sections.parse.BusPositionParse;
import businspection.xpro.com.ebusdriver.sections.parse.LoginParse;
import businspection.xpro.com.ebusdriver.sections.parse.NoticeParse;
import businspection.xpro.com.ebusdriver.sections.task.entity.MainEntity;
import businspection.xpro.com.ebusdriver.sections.task.parse.CodeAndCarParse;

/**
 * Created by houyang on 2016/12/20.
 */
public class MainLogic extends BaseLogic {
    Context context;

    public MainLogic(Handler handler, Context context) {
        super(handler);
        this.context = context;
    }

    /**
     * login,登陆接口
     */
    public void login(String phoneNum, String miei) {
//        JSONObject loginObject = new JSONObject();
//        try {
//            loginObject.put("phoneNum", phoneNum);
//            loginObject.put("phoneMac", miei);
//        } catch (JSONException e) {
//            e.printStackTrace();
//        }
        LoginParmsEntity loginParmsEntity = new LoginParmsEntity();
        loginParmsEntity.setSerial(miei.toUpperCase());
        loginParmsEntity.setSimInfo(phoneNum.toUpperCase());
        RequestParams params = RequestParamUtils.getRequestParams(HttpUrls.baseUrl(context));
        params.addBodyParameter("messageType", "login");
        params.setAsJsonContent(true);
        params.addBodyParameter(Constants.PARAMJSON, new Gson().toJson(loginParmsEntity));
//        params.addBodyParameter("json", loginObject.toString());(两种方法都可以)
        doRequest(params, "post", 0);
    }


    /**
     * 获得任务列表详情数据接口
     */
    public void getTaskInfo(String userId, String time) {
        TaskParamsEntity taskParamsEntity = new TaskParamsEntity();
        taskParamsEntity.setCode(userId);
        taskParamsEntity.setWorkday(time);
        RequestParams params = RequestParamUtils.getRequestParams(HttpUrls.baseUrl(context));
        params.setConnectTimeout(60 * 1000);

        params.addBodyParameter("messageType", "taskList");
        params.setAsJsonContent(true);
        params.addBodyParameter(Constants.PARAMJSON, new Gson().toJson(taskParamsEntity));
        doRequest(params, "post", 1);
    }


    /**
     * 首页模块的已到达车辆附近接口
     */
    public void arrivedNearBus(String userId, String taskId) {
        NearBusParamsEntity nearBusParamsEntity = new NearBusParamsEntity();
        nearBusParamsEntity.setTaskId(taskId);
        nearBusParamsEntity.setCode(userId);
        RequestParams params = RequestParamUtils.getRequestParams(HttpUrls.baseUrl(context));
        params.addBodyParameter("messageType", "arriveUpload");
        params.setAsJsonContent(true);
        params.addBodyParameter(Constants.PARAMJSON, new Gson().toJson(nearBusParamsEntity));
        doRequest(params, "post", 2);
    }

    /**
     * 获取车辆位置接口
     */
    public void getBusPosition(String busCode) {
        BusPositionParamsEntity busPositionParamsEntity = new BusPositionParamsEntity();
        busPositionParamsEntity.setBusCode(busCode);
        RequestParams params = RequestParamUtils.getRequestParams(HttpUrls.baseUrl(context));
        params.addBodyParameter("messageType", "getVehicleLocation");
        params.setAsJsonContent(true);
        params.addBodyParameter(Constants.PARAMJSON, new Gson().toJson(busPositionParamsEntity));
        doRequest(params, "post", 3);
    }


    /**
     * 提醒模块数据
     */

    public void getNotice(String userId) {
        NoticeParamEntity noticeParamEntity = new NoticeParamEntity();
        noticeParamEntity.setCode(userId);
        RequestParams params = RequestParamUtils.getRequestParams(HttpUrls.baseUrl(context));
        params.addBodyParameter("messageType", "remindMsg");
        params.addBodyParameter(Constants.PARAMJSON, new Gson().toJson(noticeParamEntity));
        doRequest(params, "post", 4);
    }

    @Override
    public void doResponse(String result, int flag) {
        super.doResponse(result, flag);
        Message message = new Message();
        switch (flag) {
            //登陆接口
            case 0:
                LoginMainEntity loginMainEntity = LoginParse.loginMainParse(result);
                Log.e("loginMainEntity", "loginMainEntity解析成功:" + loginMainEntity.toString());
                //返回正常
                if (Constants.ERRORCODE_SUCCESS.equals(loginMainEntity.getErrorCode())) {
                    message.what = Constants.HANDLER_LOGIN_SUCCESS;
                    message.obj = loginMainEntity.getBody().getDriver();
                    handler.sendMessage(message);
                } else if (Constants.ERRORCODE_FAIL.equals(loginMainEntity.getErrorCode())) {
                    //返回失败
                    message.what = Constants.HANDLER_LOGIN_FAIL;
                    message.obj = loginMainEntity.getMsg();
                    handler.sendMessage(message);
                }
                break;

            //获得任务详情数据接口
            case 1:
                TaskInfoMainEntity taskInfoMainEntity = businspection.xpro.com.ebusdriver.sections.parse.TaskInfoParse.taskInfoMainParse(result);

                Log.e("taskInfoMainEntity", "taskInfoMainEntity:" + taskInfoMainEntity.toString());
                if (Constants.ERRORCODE_SUCCESS.equals(taskInfoMainEntity.getErrorCode())) {
                    //返回正常
                    message.what = Constants.HANDLER_TASKINFO_SUCCESS;
                    message.obj = taskInfoMainEntity.getBody().getTlist();
                    handler.sendMessage(message);
                } else if (Constants.ERRORCODE_FAIL.equals(taskInfoMainEntity.getErrorCode())) {
                    //返回失败
                    message.what = Constants.HANDLER_TASKINFO_FAIL;
                    message.obj = taskInfoMainEntity.getMsg();
                    handler.sendMessage(message);
                }
                break;

            //已达到车辆附近
            case 2:
                MainEntity mainEntity = CodeAndCarParse.mainParse(result);
                Log.e("mainEntity", "mainEntity:" + mainEntity.toString());
                if (Constants.ERRORCODE_SUCCESS.equals(mainEntity.getErrorCode())) {
                    message.what = Constants.HANDLER_ARRIVED_SUCCESS;
                    message.obj = mainEntity.getMsg();
                    handler.sendMessage(message);
                } else if (Constants.ERRORCODE_FAIL.equals(mainEntity.getErrorCode())) {
                    //我已达到车辆附近返回失败
                    message.what = Constants.HANDLER_ARRIVED_FAIL;
                    message.obj = mainEntity.getMsg();
                    handler.sendMessage(message);
                }
                break;

            //获得而车辆位置接口
            case 3:
                BusPositionMainEntity busPositionMainEntity = BusPositionParse.busPositionMainParse(result);
                Log.e("busPositionMainEntity", "busPositionMainEntity:" + busPositionMainEntity.toString());
                if (Constants.ERRORCODE_SUCCESS.equals(busPositionMainEntity.getErrorCode())) {
                    message.what = Constants.HANDLER_BUSPOSITION_SUCCESS;
                    message.obj = busPositionMainEntity.getBody();
                    handler.sendMessage(message);
                } else if (Constants.ERRORCODE_FAIL.equals(busPositionMainEntity.getErrorCode())) {
                    message.what = Constants.HANDLER_BUSPOSITION_FAIL;
                    message.obj = busPositionMainEntity.getBody();
                    handler.sendMessage(message);
                }
                break;

            //提醒接口
            case 4:
                NoticeMainEntity noticeMainEntity = NoticeParse.noticeMainParse(result);
                Log.e("noticeMainEntity", "noticeMainEntity:" + noticeMainEntity.toString());
                if (Constants.ERRORCODE_SUCCESS.equals(noticeMainEntity.getErrorCode())) {
                    message.what = Constants.HANDLER_NOTICE_SUCCESS;
                    message.obj = noticeMainEntity.getBody().getMessageList();
                    handler.sendMessage(message);
                } else if (Constants.ERRORCODE_FAIL.equals(noticeMainEntity.getErrorCode())) {
                    message.what = Constants.HANDLER_NOTICE_FAIL;
                    message.obj = noticeMainEntity.getMsg();
                    handler.sendMessage(message);
                }
                break;

        }
    }
}
