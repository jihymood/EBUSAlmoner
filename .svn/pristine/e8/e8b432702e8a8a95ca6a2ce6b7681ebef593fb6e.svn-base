package com.xpro.ebusalmoner.logic;

import android.content.Context;
import android.os.Handler;
import android.os.Message;

import com.alibaba.fastjson.JSON;
import com.google.gson.Gson;
import com.xpro.ebusalmoner.baseapi.BaseLogic;
import com.xpro.ebusalmoner.constants.Constants;
import com.xpro.ebusalmoner.constants.HttpUrls;
import com.xpro.ebusalmoner.entity.TempletBean;
import com.xpro.ebusalmoner.test.BreakdownInfoRoot_M;
import com.xpro.ebusalmoner.test.BreakdownRoot_M;
import com.xpro.ebusalmoner.test.HistoryRoot_M;
import com.xpro.ebusalmoner.test.NewVersionRoot;
import com.xpro.ebusalmoner.test.PersonalRoot;
import com.xpro.ebusalmoner.test.TrailerTaskRoot_S;

import org.xutils.http.RequestParams;

public class TaskLogic extends BaseLogic {

    private Context context;
    private Gson gson;
    private String jsonStr;
    private TempletBean templetBean;

    public TaskLogic(Handler handler, Context context) {
        // TODO Auto-generated constructor stub
        super(handler);
        this.context = context;
        gson = new Gson();
        templetBean = new TempletBean();
    }

    /**
     * 管理人员-待分配
     */
    public void faultInformation() {
        RequestParams params = new RequestParams(HttpUrls.url);
        params.addBodyParameter("messageType", "faultInformation");//接口名
        doRequest(params, "get", 0);
    }

    /**
     * 已分配
     * doRequest(params, "get", 1);
     */
    public void faultInformation2() {
        RequestParams params = new RequestParams(HttpUrls.url);
        params.addBodyParameter("messageType", "faultInformation");//接口名（暂时用待分配借口）
        doRequest(params, "get", 1);
    }

    /**
     * 管理人员-已完成
     */
    public void hasCompleteTask(String date) {
        RequestParams params = new RequestParams(HttpUrls.url);
        params.addBodyParameter("messageType", "historyFault");//接口名
//        params.addBodyParameter("id", "0");
//        params.addBodyParameter("date", date);

        templetBean.setId("0");
        templetBean.setDate(date);
        jsonStr = gson.toJson(templetBean);
        params.addBodyParameter("paramJson", jsonStr);

        doRequest(params, "get", 2);
    }

    /**
     * 管理人员待分配-详情-拖车接口
     *
     * @return
     */
    public void getTrailers() {
        RequestParams params = new RequestParams(HttpUrls.url);
        params.addBodyParameter("messageType", "trailerInformation");//接口名
//        params.addBodyParameter("id", "0");
        templetBean.setId("0");
        jsonStr = gson.toJson(templetBean);
        params.addBodyParameter("paramJson",jsonStr);
        doRequest(params, "get", 3);
    }

    /**
     * 实施人员-任务接口
     */
    public void getTask() {
        RequestParams params = new RequestParams(HttpUrls.url);
        params.addBodyParameter("messageType", "task");//接口名
        doRequest(params, "get", 4);
    }


    /**
     * 我的模块
     */
    public void getPersonal() {
        RequestParams params = new RequestParams(HttpUrls.url);
        params.addBodyParameter("messageType", "basicData");
//        params.addBodyParameter("userId", "1");
        templetBean.setId("1");
        jsonStr = gson.toJson(templetBean);
        params.addBodyParameter("paramJson",jsonStr);
        doRequest(params, "get", 5);
    }

    /**
     * 检查更新
     */
    public void getNewVersion() {
        RequestParams params = new RequestParams(HttpUrls.url);
        params.addBodyParameter("messageType", "versionUpdate");
//        params.addBodyParameter("version", "1");
        templetBean.setId("1");
        jsonStr = gson.toJson(templetBean);
        params.addBodyParameter("paramJson",jsonStr);
        doRequest(params, "get", 6);
    }

    @Override
    public void doResponse(String result, int flag) {
        // TODO Auto-generated method stub
        super.doResponse(result, flag);
        Message msg = new Message();
        switch (flag) {
            case 0:
                BreakdownRoot_M root0 = JSON.parseObject(result, BreakdownRoot_M.class);
                if (root0.getErrorCode().equals("-1")) {
                    //获得待分配数据成功
                    msg.what = Constants.manager_wait_allot_success;
                    msg.obj = root0.getBody().getData();
                    handler.sendMessage(msg);
                } else {
                    //获得待分配数据失败
                    msg.what = Constants.manager_wait_allot_fail;
                    msg.obj = root0.getMsg();
                    handler.sendMessage(msg);
                }
                break;
            case 1:
                BreakdownRoot_M root1 = JSON.parseObject(result, BreakdownRoot_M.class);
                if (root1.getErrorCode().equals("-1")) {
                    //获得待分配数据成功
                    msg.what = Constants.manager_complete_allot_success;
                    msg.obj = root1.getBody().getData();
                    handler.sendMessage(msg);
                } else {
                    //获得待分配数据失败
                    msg.what = Constants.manager_complete_allot_fail;
                    msg.obj = root1.getMsg();
                    handler.sendMessage(msg);
                }
                break;
            case 2:
                HistoryRoot_M root2 = JSON.parseObject(result, HistoryRoot_M.class);
                if (root2.getErrorCode().equals("-1")) {
                    msg.what = Constants.manager_complete_success;
                    msg.obj = root2.getBody().getData();
                    handler.sendMessage(msg);
                    break;
                } else {
                    //获得待分配数据失败
                    msg.what = Constants.manager_complete_fail;
                    msg.obj = root2.getMsg();
                    handler.sendMessage(msg);
                }

                break;
            case 3:
                BreakdownInfoRoot_M root3 = JSON.parseObject(result, BreakdownInfoRoot_M.class);
                if (root3.getErrorCode().equals("-1")) {
                    msg.what = Constants.get_trailers_success;
                    msg.obj = root3.getBody().getData();
                    handler.sendMessage(msg);
                } else {
                    msg.what = Constants.get_trailers_fail;
                    msg.obj = root3.getMsg();
                    handler.sendMessage(msg);
                }
                break;
            case 4:
                TrailerTaskRoot_S root4 = JSON.parseObject(result, TrailerTaskRoot_S.class);
                if (root4.getErrorCode().equals("-1")) {
                    msg.what = Constants.get_task_success;
                    msg.obj = root4.getBody().getData();
                    handler.sendMessage(msg);
                } else {
                    msg.what = Constants.get_task_fail;
                    msg.obj = root4.getMsg();
                    handler.sendMessage(msg);
                }
                break;

            case 5:
                PersonalRoot root5 = JSON.parseObject(result, PersonalRoot.class);
                if (root5.getErrorCode().equals("-1")) {
                    msg.what = Constants.get_personal_success;
                    msg.obj = root5.getBody();
                    handler.sendMessage(msg);
                } else {
                    msg.what = Constants.get_personal_fail;
                    msg.obj = root5.getMsg();
                    handler.sendMessage(msg);
                }
                break;
            case 6:
                NewVersionRoot root6 = JSON.parseObject(result, NewVersionRoot.class);
                if (root6.getErrorCode().equals("-1")) {
                    msg.what = Constants.get_newversion_success;
                    msg.obj = root6.getBody();
                    handler.sendMessage(msg);
                } else {
                    msg.what = Constants.get_newversion_fail;
                    msg.obj = root6.getMsg();
                    handler.sendMessage(msg);
                }
                break;


            default:
                break;
        }

    }


}
